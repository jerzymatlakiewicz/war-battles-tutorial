go.property('dir', vmath.vector3())

function init(self)
	self.speed = 200	-- [px/s]
	self.life = 1		-- [s]
	msg.post('#explodeco', 'disable')
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function explode(self)
	self.life = 1000	-- just a big number so it won't explode again
	go.set_rotation(vmath.quat())
	self.speed = 0
	msg.post('#explodeco', 'enable')
	msg.post('#sprite', 'play_animation', {id = hash('explosion')})
end

function update(self, dt)
	pos = go.get_position()
	pos = pos + self.speed * self.dir * dt
	go.set_position(pos)

	self.life = self.life - dt
	if self.life < 0 then
		explode(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('animation_done') then
		go.delete()
	elseif message_id == hash('collision_response') then
		go.delete(message.other_id)
		if sender == msg.url('main', go.get_id(), 'hitco') then
			explode(self)
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
